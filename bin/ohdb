#!/usr/bin/env ruby
# == Synopsis
#   Creates a SQLite3 database file containing source code statistics for every
#   commit in a source control repository.
#
#   If the database file already exists, the database file will be updated to
#   contain any new commits created since the last run.
#
#   The source control repository must be stored on the local disk. Ohdb does
#   not work with network source control servers.
#
#   Ohdb is highly disk- and cpu-intensive, and it can take several hours to
#   process large repositories. Progress is saved incrementally, however, so it
#   can be interrupted and restarted with minimal lost work.
#
# == Examples
#   Analyze all commits in the repository based in the current directory,
#   and store the results in database ./.ohloh/commits.sqlite3:
#
#       ohdb make
#
#   Display a report of monthly activity in the repository:
#
#       ohdb activity --group-by=month
#
# == Usage
#   ohdb [options] [command]
#   Available commands: init, make, status, activity, size, help
#
# == Commands
#
#    init                 Initialize a new, empty database. Does nothing if a
#                         database already exists.
#
#    make                 Update the database to include all commits.
#
#    status               Display the status of the database.
#
#    activity             Display a report of development activity, based on
#                         data stored in the database. This report can be
#                         grouped by language, month, or name.
#
#    size                 Display a report of the total lines of code
#                         in the repository by month.
#
# == Global Options
#
#   -r, --repository <path>   Specify the path to the source control repository.
#                             Defalts to the current directory.
#
#   -o, --output <path>   Specify the filename for the commit database.
#                         If the path does not exist, it will be created.
#                         By default, the database is stored in a hidden
#                         directory name ".ohloh" within the repository
#                         directory.
#
#   -b, --branch <name>   Process the specified branch. Only commits that are
#                         ancestors of this branch will appear in the database.
#
#                         Do not mix and match branches within a single database!
#                         If you want statistics for multiple branches, you
#                         must build a separate database for each branch.
#
#   -g, --group-by [language|name|month|year|l|n|m|y]
#                         Applies to the 'activity' reporting command only.
#
#   -V, --verbose         Verbose output
#   -q, --quiet           Output as little as possible. Overrides verbose.
#   -?, -h, --help        Displays this help message

require 'optparse'
require 'rdoc/usage'
require 'ostruct'

require File.join(File.dirname(__FILE__), '../lib/ohdb')
include Ohdb

class App
	attr_accessor :options

	def initialize(args, io)
		@io = io
		@args = args
	end

  # Parse options, check arguments, then process the command
  def run
		parse_options(@args)
		process_command
  end

  protected

    def parse_options(args)
			@options = OpenStruct.new
			OptionParser.new do |opts|

				opts.on('-r REPO', '--repository REPO') { |r| @options.path = r }
				opts.on('-b BRANCH', '--branch BRANCH') { |b| @options.branch_name = b }
				opts.on('-o OUTPUT', '--output OUTPUT') { |o| @options.output = o }

				opts.on('-g GROUP', '--group-by GROUP') { |g| @options.group_by = g }

				opts.on('-V', '--verbose')     { @options.verbose = true }
				opts.on('-q', '--quiet')       { @options.quiet = true }
				opts.on('-?', '-h', '--help')  { output_help }

				opts.parse!(args) rescue output_usage
			end

			@options.path ||= Dir.pwd
			@options.output ||= File.join(@options.path, ".ohloh/commits.sqlite3")
			@options.verbose = false if @options.quiet
			@options.command = args.pop

			if @options.command == "help"
				output_help
				exit 0
			end
    end

		def output_options
			puts "Options:\n"

			options.marshal_dump.each do |name, val|
				puts "  #{name} = #{val}"
			end
		end

		def output_help
			RDoc::usage()
		end

		def output_usage
			RDoc::usage(1, 'usage')
		end

		def process_command
			command_class = Ohdb::Commands.const_get(@options.command.capitalize) rescue output_usage
			command_class.new(@options).run
		end

end

# Create and run the application
app = App.new(ARGV, STDIN)
app.run
